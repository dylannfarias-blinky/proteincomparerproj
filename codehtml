<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Protein Bars & Smoothies – Comparison Site (Starter)</title>
  <style>
    :root {
      --bg: #0f172a;        /* slate-900 */
      --card: #111827;      /* gray-900 */
      --muted: #94a3b8;     /* slate-400 */
      --ink: #e2e8f0;       /* slate-200 */
      --accent: #22c55e;    /* green-500 */
      --danger: #ef4444;    /* red-500 */
      --ring: #334155;      /* slate-700 */
    }
    * { box-sizing: border-box; }
    html, body { margin: 0; padding: 0; background: var(--bg); color: var(--ink); font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji"; }
    a { color: inherit; text-decoration: none; }
    header { position: sticky; top: 0; z-index: 50; backdrop-filter: blur(10px); background: rgba(15,23,42,0.7); border-bottom: 1px solid var(--ring); }
    .container { max-width: 1100px; margin: 0 auto; padding: 0 16px; }
    .nav { display: flex; align-items: center; justify-content: space-between; padding: 14px 0; }
    .nav h1 { font-size: 18px; margin: 0; letter-spacing: 0.2px; }
    .nav ul { display: flex; gap: 14px; list-style: none; margin: 0; padding: 0; }
    .nav a { padding: 8px 10px; border-radius: 10px; border: 1px solid transparent; }
    .nav a:hover { border-color: var(--ring); }

    .hero { padding: 56px 0 28px; text-align: center; }
    .hero h2 { font-size: clamp(26px, 3.2vw, 40px); margin: 0 0 10px; }
    .hero p { color: var(--muted); margin: 0 0 18px; }
    .searchbar { display: flex; gap: 10px; justify-content: center; }
    input[type="search"], select, button { background: var(--card); color: var(--ink); border: 1px solid var(--ring); padding: 10px 12px; border-radius: 12px; }
    button.primary { background: var(--accent); color: #04140a; border-color: transparent; font-weight: 700; }

    .quick-filters { display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 10px; margin-top: 18px; }
    .chip { background: var(--card); padding: 10px 12px; border-radius: 999px; border: 1px solid var(--ring); text-align: center; cursor: pointer; }
    .chip:hover { border-color: var(--accent); }

    section { padding: 34px 0; border-top: 1px solid var(--ring); }
    h3 { margin: 0 0 14px; font-size: 22px; }

    .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr)); gap: 14px; }
    .card { background: var(--card); border: 1px solid var(--ring); border-radius: 16px; padding: 14px; }
    .card h4 { margin: 0 0 4px; }
    .meta { color: var(--muted); font-size: 14px; }

    table { width: 100%; border-collapse: collapse; background: var(--card); border: 1px solid var(--ring); border-radius: 12px; overflow: hidden; }
    thead th { text-align: left; font-size: 14px; color: var(--muted); background: #0b1224; padding: 10px; border-bottom: 1px solid var(--ring); }
    tbody td { padding: 10px; border-bottom: 1px solid var(--ring); vertical-align: top; }
    tbody tr:last-child td { border-bottom: 0; }
    .ok { color: var(--accent); font-weight: 700; }
    .bad { color: var(--danger); font-weight: 700; }

    .compare-controls { display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 10px; margin-bottom: 12px; }

    footer { padding: 30px 0; color: var(--muted); text-align: center; }

    .sr-only { position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); white-space: nowrap; border: 0; }
  </style>
</head>
<body>
  <header>
    <div class="container nav" role="navigation" aria-label="Primary">
      <h1>Protein Compare</h1>
      <ul>
        <li><a href="#home">Home</a></li>
        <li><a href="#compare">Compare</a></li>
        <li><a href="#bars">Protein Bars</a></li>
        <li><a href="#smoothies">Smoothies</a></li>
        <li><a href="#blog">Guides</a></li>
        <li><a href="#about">About</a></li>
        <li><a href="#contact">Contact</a></li>
      </ul>
    </div>
  </header>

  <main class="container">
    <!-- HOME -->
    <section id="home" class="hero" aria-labelledby="home-title">
      <h2 id="home-title">Compare Protein Bars & Smoothies</h2>
      <p>Find the best pick for your goals: high protein, low sugar, or best value.</p>
      <form class="searchbar" role="search" onsubmit="event.preventDefault(); searchProducts();">
        <label class="sr-only" for="q">Search products</label>
        <input type="search" id="q" placeholder="Search by name, brand, or ingredient" />
        <button type="submit" class="primary">Search</button>
      </form>
      <div class="quick-filters" aria-label="Quick filters">
        <button class="chip" onclick="applyQuickFilter('highProtein')">High Protein (≥20g)</button>
        <button class="chip" onclick="applyQuickFilter('lowSugar')">Low Sugar (≤5g)</button>
        <button class="chip" onclick="applyQuickFilter('budget')">Budget Friendly</button>
        <button class="chip" onclick="applyQuickFilter('under200cal')">Under 200 Calories</button>
      </div>
    </section>

    <!-- COMPARE -->
    <section id="compare" aria-labelledby="compare-title">
      <h3 id="compare-title">Comparison Tool</h3>
      <div class="compare-controls">
        <div>
          <label for="selectA">Select Item A</label>
          <select id="selectA" onchange="renderComparison()"></select>
        </div>
        <div>
          <label for="selectB">Select Item B</label>
          <select id="selectB" onchange="renderComparison()"></select>
        </div>
        <div>
          <label for="categoryFilter">Category</label>
          <select id="categoryFilter" onchange="populateSelects(); renderComparison();">
            <option value="all">Bar vs Smoothie</option>
            <option value="bars">Bars only</option>
            <option value="smoothies">Smoothies only</option>
          </select>
        </div>
      </div>
      <div id="compareTableWrap"></div>
    </section>

    <!-- LISTINGS: BARS -->
    <section id="bars" aria-labelledby="bars-title">
      <h3 id="bars-title">Protein Bars</h3>
      <div class="grid" id="barsGrid"></div>
    </section>

    <!-- LISTINGS: SMOOTHIES -->
    <section id="smoothies" aria-labelledby="smoothies-title">
      <h3 id="smoothies-title">Smoothies</h3>
      <div class="grid" id="smoothiesGrid"></div>
    </section>

    <!-- BLOG/GUIDES -->
    <section id="blog" aria-labelledby="blog-title">
      <h3 id="blog-title">Guides & Articles</h3>
      <div class="grid" id="blogGrid">
        <article class="card">
          <h4>Best Protein Bars for Weight Loss</h4>
          <p class="meta">A quick primer on calories, fiber, and sugar alcohols.</p>
        </article>
        <article class="card">
          <h4>Are Smoothies Actually Healthy?</h4>
          <p class="meta">How to balance fruit sugars with protein and fiber.</p>
        </article>
        <article class="card">
          <h4>Bar vs Smoothie: Which Fits Your Day?</h4>
          <p class="meta">Portability vs. satiety, plus cost per serving.</p>
        </article>
      </div>
    </section>

    <!-- ABOUT -->
    <section id="about" aria-labelledby="about-title">
      <h3 id="about-title">About This Site</h3>
      <p class="meta">We collect nutrition facts from product labels and official brand pages. Price per serving is estimated from common US retailers and may vary by location.</p>
    </section>

    <!-- CONTACT -->
    <section id="contact" aria-labelledby="contact-title">
      <h3 id="contact-title">Contact</h3>
      <form onsubmit="event.preventDefault(); alert('Thanks for your message!');" aria-label="Contact form" class="card">
        <label for="name">Name</label>
        <input id="name" required placeholder="Your name" />
        <label for="email">Email</label>
        <input id="email" type="email" required placeholder="you@example.com" />
        <label for="msg">Message</label>
        <textarea id="msg" rows="4" placeholder="Suggest a product or report an issue"></textarea>
        <div style="margin-top:10px"><button class="primary">Send</button></div>
      </form>
    </section>
  </main>

  <footer>
    <div class="container">© <span id="year"></span> Protein Compare. All rights reserved.</div>
  </footer>

  <script>
    // --- Sample Data (replace with real data or API calls) ---
    const bars = [
      { id: 'bar-1', type: 'bar', name: 'LeanLift 20', brand: 'MacroMax', calories: 190, protein: 20, carbs: 22, sugar: 3, fat: 7, price: 1.79, ingredients: ['whey', 'almonds', 'fiber'] },
      { id: 'bar-2', type: 'bar', name: 'Fiber+ Crunch', brand: 'Snackwise', calories: 210, protein: 16, carbs: 25, sugar: 2, fat: 8, price: 1.49, ingredients: ['soy', 'oats', 'chicory fiber'] },
      { id: 'bar-3', type: 'bar', name: 'PowerPlant 22', brand: 'GreenFuel', calories: 200, protein: 22, carbs: 18, sugar: 5, fat: 9, price: 2.29, ingredients: ['pea', 'rice', 'dates'] },
    ];

    const smoothies = [
      { id: 'sm-1', type: 'smoothie', name: 'Berry Builder', brand: 'BlendCo', sizeOz: 16, calories: 240, protein: 18, carbs: 34, sugar: 24, fat: 4, price: 5.49, ingredients: ['strawberry', 'blueberry', 'whey'] },
      { id: 'sm-2', type: 'smoothie', name: 'Green Muscle', brand: 'BlendCo', sizeOz: 20, calories: 260, protein: 25, carbs: 28, sugar: 12, fat: 6, price: 6.29, ingredients: ['spinach', 'banana', 'pea protein'] },
      { id: 'sm-3', type: 'smoothie', name: 'Tropic Pro', brand: 'JuiceLab', sizeOz: 16, calories: 220, protein: 15, carbs: 36, sugar: 26, fat: 3, price: 5.19, ingredients: ['mango', 'pineapple', 'yogurt'] },
    ];

    const allProducts = [...bars, ...smoothies];

    // --- Utilities ---
    const $ = (sel) => document.querySelector(sel);
    const $$ = (sel) => Array.from(document.querySelectorAll(sel));

    function badge(value, goodWhenLower = false) {
      // simple visual cue for comparison
      return `<strong class="${goodWhenLower ? 'ok' : 'bad'}">${value}</strong>`;
    }

    function populateSelects() {
      const scope = $('#categoryFilter').value; // all | bars | smoothies
      const pool = scope === 'bars' ? bars : (scope === 'smoothies' ? smoothies : allProducts);
      const makeOption = (p) => `<option value="${p.id}">${p.name} — ${p.brand} (${p.type})</option>`;
      $('#selectA').innerHTML = pool.map(makeOption).join('');
      $('#selectB').innerHTML = pool.map(makeOption).join('');
      // Preselect different defaults when possible
      if (pool.length > 1) {
        $('#selectB').selectedIndex = 1;
      }
    }

    function renderComparison() {
      const idA = $('#selectA').value; const idB = $('#selectB').value;
      const A = allProducts.find(p => p.id === idA) || allProducts[0];
      const B = allProducts.find(p => p.id === idB) || allProducts[1];
      if (!A || !B) return;

      const higher = (key) => (A[key] === B[key] ? '—' : (A[key] > B[key] ? 'A' : 'B'));

      const sugarCueA = higher('sugar') === 'A' ? badge(`${A.sugar}g`, true) : `${A.sugar}g`;
      const sugarCueB = higher('sugar') === 'B' ? badge(`${B.sugar}g`, true) : `${B.sugar}g`;
      const proteinCueA = higher('protein') === 'A' ? badge(`${A.protein}g`) : `${A.protein}g`;
      const proteinCueB = higher('protein') === 'B' ? badge(`${B.protein}g`) : `${B.protein}g`;

      $('#compareTableWrap').innerHTML = `
        <table role="table" aria-label="Comparison table">
          <thead>
            <tr>
              <th>Metric</th>
              <th>${A.name} <span class="meta">(${A.type})</span></th>
              <th>${B.name} <span class="meta">(${B.type})</span></th>
            </tr>
          </thead>
          <tbody>
            <tr><td>Brand</td><td>${A.brand}</td><td>${B.brand}</td></tr>
            <tr><td>Calories</td><td>${A.calories}</td><td>${B.calories}</td></tr>
            <tr><td>Protein</td><td>${proteinCueA}</td><td>${proteinCueB}</td></tr>
            <tr><td>Sugar</td><td>${sugarCueA}</td><td>${sugarCueB}</td></tr>
            <tr><td>Carbs</td><td>${A.carbs}g</td><td>${B.carbs}g</td></tr>
            <tr><td>Fat</td><td>${A.fat}g</td><td>${B.fat}g</td></tr>
            <tr><td>Price / serving</td><td>$${A.price.toFixed(2)}</td><td>$${B.price.toFixed(2)}</td></tr>
            <tr><td>Ingredients</td><td>${A.ingredients.join(', ')}</td><td>${B.ingredients.join(', ')}</td></tr>
          </tbody>
        </table>`;
    }

    function renderListings() {
      const card = (p) => `
        <article class="card" tabindex="0" aria-label="${p.name} card">
          <h4>${p.name}</h4>
          <div class="meta">${p.brand} • ${p.type === 'bar' ? 'Protein Bar' : `${p.sizeOz}oz Smoothie`}</div>
          <ul class="meta" style="padding-left: 18px; margin: 8px 0 0;">
            <li>Calories: ${p.calories}</li>
            <li>Protein: ${p.protein}g</li>
            <li>Sugar: ${p.sugar}g</li>
            <li>Price: $${p.price.toFixed(2)}</li>
          </ul>
        </article>`;

      $('#barsGrid').innerHTML = bars.map(card).join('');
      $('#smoothiesGrid').innerHTML = smoothies.map(card).join('');
    }

    function searchProducts() {
      const q = $('#q').value.trim().toLowerCase();
      const results = allProducts.filter(p =>
        p.name.toLowerCase().includes(q) ||
        p.brand.toLowerCase().includes(q) ||
        (p.ingredients || []).some(i => i.toLowerCase().includes(q))
      );
      const grid = document.createElement('div');
      grid.className = 'grid';
      grid.innerHTML = results.map(p => `
        <article class="card">
          <h4>${p.name}</h4>
          <div class="meta">${p.brand} • ${p.type}</div>
          <p class="meta">${(p.ingredients||[]).join(', ')}</p>
        </article>`).join('');
      // Insert below hero
      const existing = document.getElementById('searchResults');
      if (existing) existing.remove();
      const wrap = document.createElement('section');
      wrap.id = 'searchResults';
      wrap.innerHTML = `<h3>Search Results</h3>`;
      wrap.appendChild(grid);
      document.querySelector('main').insertBefore(wrap, document.getElementById('compare'));
    }

    function applyQuickFilter(kind) {
      let filtered = [];
      if (kind === 'highProtein') filtered = allProducts.filter(p => p.protein >= 20);
      if (kind === 'lowSugar') filtered = allProducts.filter(p => p.sugar <= 5);
      if (kind === 'budget') filtered = allProducts.filter(p => p.price <= 2.00);
      if (kind === 'under200cal') filtered = allProducts.filter(p => p.calories <= 200);

      const grid = document.createElement('div');
      grid.className = 'grid';
      grid.innerHTML = filtered.map(p => `
        <article class="card">
          <h4>${p.name}</h4>
          <div class="meta">${p.brand} • ${p.type}</div>
          <ul class="meta" style="padding-left: 18px; margin: 8px 0 0;">
            <li>Calories: ${p.calories}</li>
            <li>Protein: ${p.protein}g</li>
            <li>Sugar: ${p.sugar}g</li>
            <li>Price: $${p.price.toFixed(2)}</li>
          </ul>
        </article>`).join('');

      const existing = document.getElementById('quickFilterResults');
      if (existing) existing.remove();
      const wrap = document.createElement('section');
      wrap.id = 'quickFilterResults';
      wrap.innerHTML = `<h3>Filtered Picks</h3>`;
      wrap.appendChild(grid);
      document.querySelector('main').insertBefore(wrap, document.getElementById('compare'));
    }

    // Init
    document.addEventListener('DOMContentLoaded', () => {
      document.getElementById('year').textContent = new Date().getFullYear();
      populateSelects();
      renderComparison();
      renderListings();
    });
  </script>
</body>
</html>
